#!/bin/bash

# Demo script cho RL Chatbot

echo "üöÄ RL Chatbot Demo Script"
echo "=========================="

# T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
mkdir -p data

# Ki·ªÉm tra Python dependencies
echo "üìã Ki·ªÉm tra dependencies..."

# Ki·ªÉm tra OpenAI API key
if [ -z "$OPENAI_API_KEY" ]; then
    # Ki·ªÉm tra file .env
    if [ -f ".env" ]; then
        echo "üìÅ T√¨m th·∫•y file .env, ƒëang load..."
        export $(cat .env | grep -v '^#' | xargs)
    else
        echo "‚ö†Ô∏è  OPENAI_API_KEY ch∆∞a ƒë∆∞·ª£c set v√† kh√¥ng t√¨m th·∫•y file .env!"
        echo "   H√£y ch·∫°y: python setup_env.py"
        echo "   Ho·∫∑c t·∫°o file .env v·ªõi n·ªôi dung: OPENAI_API_KEY=your-api-key-here"
        read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng? (y/N): " continue_choice
        if [[ $continue_choice != [Yy] ]]; then
            exit 1
        fi
    fi
fi

# Ki·ªÉm tra basic dependencies (b·ªè transformers v√¨ kh√¥ng c·∫ßn n·ªØa)
python -c "import torch, streamlit, openai" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå M·ªôt s·ªë dependencies ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t."
    echo "   ƒêang c·ªë g·∫Øng c√†i ƒë·∫∑t dependencies c·∫ßn thi·∫øt..."
    
    # C√†i ƒë·∫∑t dependencies c∆° b·∫£n tr∆∞·ªõc (b·ªè faiss-cpu n·∫øu g√¢y l·ªói)
    pip install torch streamlit openai numpy pandas scikit-learn tqdm pydantic python-dotenv
    
    # Th·ª≠ c√†i faiss-cpu, n·∫øu l·ªói th√¨ d√πng alternative
    echo "üì¶ ƒêang c√†i ƒë·∫∑t vector search dependencies..."
    pip install faiss-cpu 2>/dev/null || {
        echo "‚ö†Ô∏è  faiss-cpu installation failed, s·ª≠ d·ª•ng chromadb thay th·∫ø..."
        pip install chromadb sentence-transformers
    }
    
    echo "‚úÖ Dependencies installation completed"
else
    echo "‚úÖ Dependencies OK"
fi

# Menu l·ª±a ch·ªçn
echo ""
echo "Ch·ªçn ch·∫ø ƒë·ªô ch·∫°y:"
echo "1. Interactive Chat (Terminal)"
echo "2. Web Interface (Streamlit)"  
echo "3. OpenAI API Test (Quick test)"
echo "4. Training v·ªõi sample data"
echo "5. Evaluation v·ªõi sample data"
echo "6. Setup Environment (.env)"

read -p "Nh·∫≠p l·ª±a ch·ªçn (1-6): " choice

case $choice in
    1)
        echo "üó£Ô∏è  B·∫Øt ƒë·∫ßu Interactive Chat..."
        export PYTHONPATH="${PWD}/src:${PYTHONPATH}"
        python src/main.py --mode interactive --config configs/default.json
        ;;
    2)
        echo "üåê B·∫Øt ƒë·∫ßu Web Interface..."
        export PYTHONPATH="${PWD}/src:${PYTHONPATH}"
        cd src && streamlit run app.py
        ;;
    3)
        echo "üß™ OpenAI API Test..."
        if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ùå OPENAI_API_KEY is required for this test!"
            exit 1
        fi
        
        echo "Testing OpenAI connection..."
        python -c "
from openai import OpenAI
import os

try:
    client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
    response = client.chat.completions.create(
        model='gpt-3.5-turbo',
        messages=[{'role': 'user', 'content': 'Hello! This is a test.'}],
        max_tokens=50
    )
    print('‚úÖ OpenAI API connection successful!')
    print(f'Response: {response.choices[0].message.content}')
    print(f'Tokens used: {response.usage.total_tokens}')
except Exception as e:
    print(f'‚ùå OpenAI API error: {e}')
    exit(1)
"
        
        echo ""
        echo "ü§ñ Starting RL Chatbot with OpenAI..."
        export PYTHONPATH="${PWD}/src:${PYTHONPATH}"
        python -c "
import sys
import os
sys.path.insert(0, os.path.join(os.getcwd(), 'src'))
from agents.rl_chatbot import RLChatbotAgent
import json

# Load config
with open('configs/default.json', 'r') as f:
    config = json.load(f)

# Initialize agent
agent = RLChatbotAgent(
    openai_model=config.get('openai_model', 'gpt-3.5-turbo'),
    api_key=os.getenv('OPENAI_API_KEY'),
    config=config
)

# Start conversation
agent.start_conversation()
print('ü§ñ RL Chatbot ready! Type your message:')

# Simple test interaction
result = agent.process_message('Xin ch√†o! B·∫°n c√≥ th·ªÉ gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n kh√¥ng?')
print(f'Bot: {result[\"response\"]}')
print(f'üìä Memories used: {result[\"relevant_memories_count\"]}')
print(f'‚è±Ô∏è Response time: {result[\"response_time_ms\"]:.2f}ms')
if result.get('openai_usage'):
    usage = result['openai_usage']
    print(f'üí∞ Tokens: {usage.get(\"total_tokens\", 0)}')
"
        ;;
    4)
        echo "üéì B·∫Øt ƒë·∫ßu Training..."
        export PYTHONPATH="${PWD}/src:${PYTHONPATH}"
        python src/main.py --mode train --data examples/sample_training_data.json --config configs/default.json --save data/trained_agent.json
        ;;
    5)
        echo "üß™ B·∫Øt ƒë·∫ßu Evaluation..."
        export PYTHONPATH="${PWD}/src:${PYTHONPATH}"
        python src/main.py --mode eval --data examples/sample_training_data.json --config configs/default.json --load data/trained_agent.json
        ;;
    6)
        echo "üîß Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng..."
        python setup_env.py
        ;;
    *)
        echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
        exit 1
        ;;
esac

echo ""
echo "üéâ Demo completed!"

# Helpful tips
echo ""
echo "üí° Tips:"
echo "   - ƒê·ªÉ test OpenAI API: python examples/simple_openai_test.py"
echo "   - ƒê·ªÉ monitor costs: https://platform.openai.com/usage"
echo "   - N·∫øu g·∫∑p l·ªói faiss-cpu: system s·∫Ω t·ª± ƒë·ªông fallback sang chromadb"
echo "   - Config trong: file .env (s·ª≠ d·ª•ng dotenv)"
echo "   - Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng: python setup_env.py"
echo "   - Chi ti·∫øt dotenv: xem README_ENV.md"
