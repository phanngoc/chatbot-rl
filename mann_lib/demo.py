#!/usr/bin/env python3
"""
Demo script cho MANN CLI Chatbot
Th·ªÉ hi·ªán c√°c t√≠nh nƒÉng ch√≠nh c·ªßa h·ªá th·ªëng
"""

import asyncio
import sys
import time
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

from mann_chatbot import MANNChatbot
from standalone_mann.mann_config import MANNConfig


async def demo_basic_conversation():
    """Demo cu·ªôc tr√≤ chuy·ªán c∆° b·∫£n"""
    print("üé≠ Demo: Basic Conversation")
    print("=" * 50)
    
    config = MANNConfig()
    chatbot = MANNChatbot(config)
    
    try:
        await chatbot.initialize()
        
        # Simulate conversation
        conversations = [
            "Xin ch√†o, t√¥i t√™n l√† Ng·ªçc",
            "T√¥i 25 tu·ªïi v√† ƒëang l√†m vi·ªác t·∫°i H√† N·ªôi",
            "T√¥i th√≠ch l·∫≠p tr√¨nh Python v√† h·ªçc v·ªÅ AI",
            "B·∫°n c√≥ nh·ªõ t√™n t√¥i kh√¥ng?",
            "T√¥i ƒëang h·ªçc v·ªÅ Machine Learning",
            "B·∫°n bi·∫øt g√¨ v·ªÅ s·ªü th√≠ch c·ªßa t√¥i?",
            "T√¥i mu·ªën t·∫°o m·ªôt chatbot th√¥ng minh",
            "H√¥m nay tr·ªùi ƒë·∫πp, t√¥i ƒëi d·∫°o c√¥ng vi√™n"
        ]
        
        for i, user_input in enumerate(conversations, 1):
            print(f"\nüë§ User {i}: {user_input}")
            
            start_time = time.time()
            response = await chatbot.process_user_input(user_input)
            processing_time = time.time() - start_time
            
            print(f"ü§ñ Bot: {response}")
            print(f"‚è±Ô∏è  Processing time: {processing_time:.3f}s")
            
            # Small delay for demo effect
            await asyncio.sleep(1)
        
        # Show statistics
        stats = await chatbot.get_memory_statistics()
        print(f"\nüìä Session Statistics:")
        print(f"  Total queries: {stats.get('total_queries', 0)}")
        print(f"  Memories created: {stats.get('total_memories_created', 0)}")
        print(f"  Memory utilization: {stats.get('memory_utilization', 0):.2%}")
        print(f"  Total retrievals: {stats.get('total_retrievals', 0)}")
        print(f"  Total writes: {stats.get('total_writes', 0)}")
        print(f"  Memory matrix norm: {stats.get('memory_matrix_norm', 0):.4f}")
        print(f"  WÃÇ norm: {stats.get('W_hat_norm', 0):.4f}")
        print(f"  VÃÇ norm: {stats.get('V_hat_norm', 0):.4f}")
        
    finally:
        await chatbot.shutdown()


async def demo_memory_search():
    """Demo t√¨m ki·∫øm memory"""
    print("\nüîç Demo: Memory Search")
    print("=" * 50)
    
    config = MANNConfig()
    chatbot = MANNChatbot(config)
    
    try:
        await chatbot.initialize()
        
        # Add some test memories first
        test_memories = [
            "T√¥i t√™n l√† Ng·ªçc, 25 tu·ªïi",
            "T√¥i th√≠ch l·∫≠p tr√¨nh Python v√† JavaScript",
            "T√¥i ƒëang h·ªçc v·ªÅ AI v√† Machine Learning",
            "T√¥i s·ªëng ·ªü H√† N·ªôi v√† l√†m vi·ªác t·∫°i c√¥ng ty ABC",
            "T√¥i th√≠ch ƒë·ªçc s√°ch v√† ch∆°i game",
            "T√¥i mu·ªën tr·ªü th√†nh m·ªôt AI Engineer",
            "H√¥m nay t√¥i ƒëi mua s·∫Øm ·ªü trung t√¢m th∆∞∆°ng m·∫°i",
            "T√¥i c√≥ m·ªôt con m√®o t√™n l√† Mimi"
        ]
        
        print("üìù Adding test memories...")
        for memory in test_memories:
            await chatbot.process_user_input(memory)
            await asyncio.sleep(0.5)
        
        # Search for different topics
        search_queries = [
            "t√™n",
            "l·∫≠p tr√¨nh",
            "AI",
            "H√† N·ªôi",
            "m√®o",
            "s·ªü th√≠ch"
        ]
        
        print("\nüîç Searching memories...")
        for query in search_queries:
            print(f"\nQuery: '{query}'")
            results = await chatbot.search_memories(query, top_k=3)
            
            if results:
                print(f"  Found {len(results)} memories:")
                for i, result in enumerate(results, 1):
                    print(f"    {i}. {result['content'][:60]}...")
                    print(f"       Similarity: {result.get('similarity', 0):.3f}")
                    print(f"       Importance: {result.get('importance_weight', 0):.2f}")
            else:
                print("  No memories found.")
    
    finally:
        await chatbot.shutdown()


async def demo_memory_management():
    """Demo qu·∫£n l√Ω memory"""
    print("\nüíæ Demo: Memory Management")
    print("=" * 50)
    
    config = MANNConfig()
    config.memory_size = 10  # Small size for demo
    chatbot = MANNChatbot(config)
    
    try:
        await chatbot.initialize()
        
        # Add memories until capacity is reached
        print("üìù Adding memories to test capacity management...")
        
        for i in range(15):  # More than memory_size
            memory_content = f"Memory {i+1}: This is test memory number {i+1}"
            await chatbot.process_user_input(memory_content)
            await asyncio.sleep(0.1)
        
        # Show memory statistics
        stats = await chatbot.get_memory_statistics()
        print(f"\nüìä Memory Statistics:")
        print(f"  Total memories: {stats.get('total_memories', 0)}")
        print(f"  Memory utilization: {stats.get('memory_utilization', 0):.2%}")
        print(f"  Max capacity: {config.memory_size}")
        
        # Show memory contents
        print(f"\nüìã Current Memories:")
        for i, memory in enumerate(chatbot.mann_model.memory_bank, 1):
            print(f"  {i}. {memory.content[:50]}...")
            print(f"     Importance: {memory.importance_weight:.2f}")
            print(f"     Usage count: {memory.usage_count}")
    
    finally:
        await chatbot.shutdown()


async def demo_health_monitoring():
    """Demo health monitoring"""
    print("\nüè• Demo: Health Monitoring")
    print("=" * 50)
    
    config = MANNConfig()
    config.enable_monitoring = True
    chatbot = MANNChatbot(config)
    
    try:
        await chatbot.initialize()
        
        # Perform some operations
        print("üîÑ Performing operations to generate metrics...")
        
        for i in range(5):
            await chatbot.process_user_input(f"Test operation {i+1}")
            await asyncio.sleep(0.5)
        
        # Check health
        print("\nüè• Health Check:")
        health = await chatbot.health_check()
        print(f"  Status: {health.get('status', 'unknown')}")
        
        checks = health.get('checks', {})
        for check_name, check_data in checks.items():
            status = check_data.get('status', 'unknown')
            status_emoji = "‚úÖ" if status == "healthy" else "‚ùå"
            print(f"  {status_emoji} {check_name}: {status}")
        
        # Show performance stats
        if chatbot.monitor:
            perf_stats = chatbot.monitor.get_performance_stats()
            print(f"\nüìà Performance Statistics:")
            print(f"  Total queries: {perf_stats.get('total_queries', 0)}")
            print(f"  Average processing time: {perf_stats.get('avg_processing_time', 0):.3f}s")
            print(f"  Error rate: {perf_stats.get('error_rate', 0):.2%}")
            print(f"  Memory utilization: {perf_stats.get('memory_utilization', 0):.2%}")
    
    finally:
        await chatbot.shutdown()


async def demo_external_working_memory():
    """Demo External Working Memory features"""
    print("\nüß† Demo: External Working Memory")
    print("=" * 50)
    
    config = MANNConfig()
    chatbot = MANNChatbot(config)
    
    try:
        await chatbot.initialize()
        
        print("üî¨ Testing External Working Memory Operations...")
        
        # Test sequences to demonstrate learning
        test_sequences = [
            "T√¥i t√™n l√† Ng·ªçc v√† th√≠ch l·∫≠p tr√¨nh",
            "T√¥i ƒëang h·ªçc v·ªÅ AI v√† Machine Learning", 
            "T√¥i s·ªëng ·ªü H√† N·ªôi v√† l√†m vi·ªác t·∫°i ABC",
            "T√¥i c√≥ s·ªü th√≠ch ƒë·ªçc s√°ch v√† ch∆°i game",
            "T√¥i mu·ªën tr·ªü th√†nh AI Engineer"
        ]
        
        print("\nüìù Processing test sequences...")
        for i, sequence in enumerate(test_sequences, 1):
            print(f"\nüë§ Input {i}: {sequence}")
            
            start_time = time.time()
            response = await chatbot.process_user_input(sequence)
            processing_time = time.time() - start_time
            
            print(f"ü§ñ Response: {response}")
            print(f"‚è±Ô∏è  Processing time: {processing_time:.3f}s")
            
            # Show memory statistics after each input
            stats = await chatbot.get_memory_statistics()
            print(f"üìä Memory stats: retrievals={stats.get('total_retrievals', 0)}, writes={stats.get('total_writes', 0)}")
            
            await asyncio.sleep(0.5)
        
        # Test memory search
        print("\nüîç Testing Memory Search...")
        search_queries = ["t√™n", "l·∫≠p tr√¨nh", "AI", "H√† N·ªôi", "s·ªü th√≠ch"]
        
        for query in search_queries:
            print(f"\nüîç Searching for: '{query}'")
            results = await chatbot.search_memories(query, top_k=2)
            
            if results:
                print(f"  Found {len(results)} relevant memories:")
                for j, result in enumerate(results, 1):
                    print(f"    {j}. {result['content'][:60]}...")
                    print(f"       Similarity: {result.get('similarity', 0):.3f}")
            else:
                print("  No relevant memories found.")
        
        # Show final statistics
        final_stats = await chatbot.get_memory_statistics()
        print(f"\nüìä Final External Working Memory Statistics:")
        print(f"  Total queries: {final_stats.get('total_queries', 0)}")
        print(f"  Total retrievals: {final_stats.get('total_retrievals', 0)}")
        print(f"  Total writes: {final_stats.get('total_writes', 0)}")
        print(f"  Memory matrix norm: {final_stats.get('memory_matrix_norm', 0):.4f}")
        print(f"  WÃÇ matrix norm: {final_stats.get('W_hat_norm', 0):.4f}")
        print(f"  VÃÇ matrix norm: {final_stats.get('V_hat_norm', 0):.4f}")
        print(f"  Memory utilization: {final_stats.get('memory_utilization', 0):.2%}")
        
        print(f"\n‚úÖ External Working Memory Demo Complete!")
        print(f"   - Memory Write: ŒºÃá·µ¢ = -z·µ¢Œº·µ¢ + cwz·µ¢a + z·µ¢WÃÇqŒº·µÄ")
        print(f"   - Memory Read: Mr = Œºz, z = softmax(Œº·µÄq)")
        print(f"   - NN Output: uad = -WÃÇ·µÄ(œÉ(VÃÇ·µÄxÃÉ + bÃÇv) + Mr) - bÃÇw")
        
    finally:
        await chatbot.shutdown()


async def demo_api_integration():
    """Demo API integration"""
    print("\nüåê Demo: API Integration")
    print("=" * 50)
    
    from standalone_mann.mann_api import MANNClient
    
    # Note: This demo assumes API server is running
    print("üì° Testing API client (requires running API server)...")
    
    try:
        async with MANNClient("http://localhost:8000") as client:
            # Health check
            print("üè• API Health Check:")
            health = await client.health_check()
            print(f"  Status: {health.get('status', 'unknown')}")
            print(f"  Memory count: {health.get('memory_count', 0)}")
            
            # Add memory via API
            print("\nüìù Adding memory via API:")
            memory_id = await client.add_memory(
                content="API test memory",
                context="api_demo",
                tags=["test", "api"],
                importance_weight=1.5
            )
            print(f"  Added memory: {memory_id}")
            
            # Search via API
            print("\nüîç Searching via API:")
            results = await client.search_memories("test", top_k=3)
            print(f"  Found {len(results)} memories")
            
            # Process query via API
            print("\nüöÄ Processing query via API:")
            response = await client.process_query("Hello from API", retrieve_memories=True)
            print(f"  Response: {response.get('output', 'No output')}")
            print(f"  Processing time: {response.get('processing_time', 0):.3f}s")
            
    except Exception as e:
        print(f"‚ùå API demo failed: {e}")
        print("üí° Make sure API server is running: python run_api.py")


async def main():
    """Run all demos"""
    print("üé™ MANN CLI Chatbot Demo Suite")
    print("=" * 60)
    
    demos = [
        ("Basic Conversation", demo_basic_conversation),
        ("External Working Memory", demo_external_working_memory),
        ("Memory Search", demo_memory_search),
        ("Memory Management", demo_memory_management),
        ("Health Monitoring", demo_health_monitoring),
        ("API Integration", demo_api_integration)
    ]
    
    for demo_name, demo_func in demos:
        try:
            print(f"\nüé¨ Starting: {demo_name}")
            await demo_func()
            print(f"‚úÖ Completed: {demo_name}")
        except Exception as e:
            print(f"‚ùå Failed: {demo_name} - {e}")
        
        print("\n" + "="*60)
        await asyncio.sleep(2)  # Pause between demos
    
    print("\nüéâ All demos completed!")
    print("\nüí° To run individual demos:")
    print("  python demo.py --demo basic")
    print("  python demo.py --demo external")
    print("  python demo.py --demo search")
    print("  python demo.py --demo memory")
    print("  python demo.py --demo health")
    print("  python demo.py --demo api")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="MANN CLI Chatbot Demo")
    parser.add_argument("--demo", choices=["basic", "external", "search", "memory", "health", "api"], 
                       help="Run specific demo")
    
    args = parser.parse_args()
    
    if args.demo:
        demo_map = {
            "basic": demo_basic_conversation,
            "external": demo_external_working_memory,
            "search": demo_memory_search,
            "memory": demo_memory_management,
            "health": demo_health_monitoring,
            "api": demo_api_integration
        }
        
        print(f"üé¨ Running demo: {args.demo}")
        asyncio.run(demo_map[args.demo]())
    else:
        asyncio.run(main())
