#!/usr/bin/env python3
"""
Test: Basic Conversation
Tests basic chatbot conversation functionality
"""

import asyncio
import sys
import time
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from mann_chatbot import MANNChatbot
from standalone_mann.mann_config import MANNConfig


async def test_basic_conversation():
    """Test basic conversation flow"""
    print("üé≠ Test: Basic Conversation")
    print("=" * 50)
    
    config = MANNConfig()
    chatbot = MANNChatbot(config)
    
    try:
        await chatbot.initialize()
        
        # Test conversation sequences
        conversations = [
            "Xin ch√†o, t√¥i t√™n l√† Ng·ªçc",
            "T√¥i 25 tu·ªïi v√† ƒëang l√†m vi·ªác t·∫°i H√† N·ªôi",
            "T√¥i th√≠ch l·∫≠p tr√¨nh Python v√† h·ªçc v·ªÅ AI",
            "B·∫°n c√≥ nh·ªõ t√™n t√¥i kh√¥ng?",
            "T√¥i ƒëang h·ªçc v·ªÅ Machine Learning",
            "B·∫°n bi·∫øt g√¨ v·ªÅ s·ªü th√≠ch c·ªßa t√¥i?",
            "T√¥i mu·ªën t·∫°o m·ªôt chatbot th√¥ng minh",
            "H√¥m nay tr·ªùi ƒë·∫πp, t√¥i ƒëi d·∫°o c√¥ng vi√™n"
        ]
        
        print(f"üìù Testing {len(conversations)} conversation turns...")
        
        for i, user_input in enumerate(conversations, 1):
            print(f"\nüë§ User {i}: {user_input}")
            
            start_time = time.time()
            response = await chatbot.process_user_input(user_input)
            processing_time = time.time() - start_time
            
            print(f"ü§ñ Bot: {response}")
            print(f"‚è±Ô∏è  Processing time: {processing_time:.3f}s")
            
            # Small delay for demo effect
            await asyncio.sleep(0.5)
        
        # Show final statistics
        stats = await chatbot.get_memory_statistics()
        print(f"\nüìä Final Statistics:")
        print(f"  Total queries: {stats.get('total_queries', 0)}")
        print(f"  Memories created: {stats.get('total_memories_created', 0)}")
        print(f"  Memory utilization: {stats.get('memory_utilization', 0):.2%}")
        print(f"  Total retrievals: {stats.get('total_retrievals', 0)}")
        print(f"  Total writes: {stats.get('total_writes', 0)}")
        print(f"  Memory matrix norm: {stats.get('memory_matrix_norm', 0):.4f}")
        
        print("\n‚úÖ Basic Conversation Test Complete!")
        
    finally:
        await chatbot.shutdown()


if __name__ == "__main__":
    asyncio.run(test_basic_conversation())