"""
Targeted Demo ƒë·ªÉ test UPDATE v√† DELETE operations trong Algorithm 1
T·∫°o scenarios c·ª• th·ªÉ ƒë·ªÉ trigger c√°c operations n√†y
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

import json
import logging
from datetime import datetime
from typing import List, Dict, Any

from agents.rl_chatbot import RLChatbotAgent
from memory.memory_manager import MemoryOperation, IntelligentMemoryManager, LLMExtractor
from memory.retrieval_memory import RetrievalAugmentedMemory, EpisodicMemory


def setup_logging():
    """Setup logging cho demo"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


def create_update_test_scenarios() -> List[Dict[str, Any]]:
    """T·∫°o scenarios ƒë·ªÉ test UPDATE operations"""
    
    return [
        {
            "name": "Food Preference Expansion", 
            "description": "User th√™m chi ti·∫øt v·ªÅ s·ªü th√≠ch ƒë√£ c√≥",
            "initial_dialogue": "User: T√¥i th√≠ch pizza.\nBot: Lo·∫°i pizza n√†o b·∫°n th√≠ch?",
            "update_dialogue": "User: T√¥i th√≠ch pizza h·∫£i s·∫£n v·ªõi nhi·ªÅu ph√¥ mai.\nBot: Pizza h·∫£i s·∫£n v·ªõi ph√¥ mai r·∫•t ngon!",
            "expected_operation": "UPDATE",
            "reasoning": "Th√™m details v√†o existing pizza preference"
        },
        {
            "name": "Allergy Information Addition",
            "description": "User cung c·∫•p th√™m th√¥ng tin v·ªÅ d·ªã ·ª©ng",
            "initial_dialogue": "User: T√¥i b·ªã d·ªã ·ª©ng t√¥m.\nBot: T√¥i s·∫Ω nh·ªõ ƒë·ªÉ tr√°nh g·ª£i √Ω m√≥n c√≥ t√¥m.",
            "update_dialogue": "User: T√¥i c≈©ng d·ªã ·ª©ng cua v√† t·∫•t c·∫£ h·∫£i s·∫£n.\nBot: T√¥i hi·ªÉu, s·∫Ω tr√°nh t·∫•t c·∫£ h·∫£i s·∫£n.",
            "expected_operation": "UPDATE", 
            "reasoning": "M·ªü r·ªông th√¥ng tin d·ªã ·ª©ng t·ª´ t√¥m sang t·∫•t c·∫£ h·∫£i s·∫£n"
        },
        {
            "name": "Dietary Preference Change",
            "description": "User thay ƒë·ªïi th√¥ng tin v·ªÅ ch·∫ø ƒë·ªô ƒÉn",
            "initial_dialogue": "User: T√¥i ƒëang ƒÉn ki√™ng keto.\nBot: T√¥i s·∫Ω g·ª£i √Ω m√≥n low-carb cho b·∫°n.",
            "update_dialogue": "User: T√¥i ƒë√£ ng·ª´ng keto, gi·ªù ƒÉn b√¨nh th∆∞·ªùng.\nBot: ƒê∆∞·ª£c r·ªìi, t√¥i s·∫Ω c·∫≠p nh·∫≠t th√¥ng tin.",
            "expected_operation": "UPDATE",
            "reasoning": "Thay ƒë·ªïi dietary status t·ª´ keto sang normal"
        }
    ]


def create_delete_test_scenarios() -> List[Dict[str, Any]]:
    """T·∫°o scenarios ƒë·ªÉ test DELETE operations"""
    
    return [
        {
            "name": "Exact Repetition",
            "description": "User l·∫∑p l·∫°i th√¥ng tin ho√†n to√†n gi·ªëng nhau",
            "initial_dialogue": "User: T√¥i th√≠ch pizza.\nBot: Lo·∫°i pizza n√†o b·∫°n th√≠ch?",
            "repeat_dialogue": "User: T√¥i th√≠ch pizza.\nBot: V√¢ng, t√¥i ƒë√£ bi·∫øt b·∫°n th√≠ch pizza.",
            "expected_operation": "DELETE ho·∫∑c NOOP",
            "reasoning": "Th√¥ng tin ho√†n to√†n tr√πng l·∫∑p"
        },
        {
            "name": "Less Important Information",
            "description": "User cung c·∫•p th√¥ng tin √≠t quan tr·ªçng h∆°n th√¥ng tin ƒë√£ c√≥",
            "initial_dialogue": "User: T√¥i b·ªã d·ªã ·ª©ng nghi√™m tr·ªçng v·ªõi t√¥m, c√≥ th·ªÉ g√¢y s·ªëc ph·∫£n v·ªá.\nBot: T√¥i s·∫Ω c·ª±c k·ª≥ c·∫©n th·∫≠n v·ªõi h·∫£i s·∫£n.",
            "repeat_dialogue": "User: T√¥i kh√¥ng ƒÉn t√¥m.\nBot: V√¢ng, t√¥i ƒë√£ ghi nh·∫≠n ƒëi·ªÅu n√†y.",
            "expected_operation": "DELETE ho·∫∑c NOOP",
            "reasoning": "Information m·ªõi √≠t chi ti·∫øt v√† quan tr·ªçng h∆°n existing"
        },
        {
            "name": "Vague Restatement",
            "description": "User n√≥i l·∫°i m·ªôt c√°ch m∆° h·ªì th√¥ng tin ƒë√£ r√µ r√†ng",
            "initial_dialogue": "User: T√¥i th√≠ch pizza Margherita v·ªõi c√† chua t∆∞∆°i v√† basil.\nBot: Pizza Margherita l√† l·ª±a ch·ªçn tuy·ªát v·ªùi!",
            "repeat_dialogue": "User: T√¥i th√≠ch pizza.\nBot: ƒê√∫ng, b·∫°n th√≠ch pizza Margherita.",
            "expected_operation": "DELETE ho·∫∑c NOOP", 
            "reasoning": "Th√¥ng tin m·ªõi qu√° general so v·ªõi existing detailed info"
        }
    ]


def create_noop_test_scenarios() -> List[Dict[str, Any]]:
    """T·∫°o scenarios ƒë·ªÉ test NOOP operations"""
    
    return [
        {
            "name": "Low Importance Small Talk",
            "description": "Conversation kh√¥ng c√≥ gi√° tr·ªã memory",
            "dialogue": "User: Tr·ªùi h√¥m nay ƒë·∫πp qu√°.\nBot: V√¢ng, th·ªùi ti·∫øt r·∫•t t·ªët.",
            "expected_operation": "NOOP",
            "reasoning": "Small talk, low importance"
        },
        {
            "name": "Greeting Exchange",
            "description": "Ch√†o h·ªèi th√¥ng th∆∞·ªùng",
            "dialogue": "User: Xin ch√†o!\nBot: Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            "expected_operation": "NOOP",
            "reasoning": "Greeting, kh√¥ng c·∫ßn memory"
        }
    ]


def manually_add_initial_memory(agent: RLChatbotAgent, content: str, context: str, importance: float = 0.8) -> str:
    """Manually add initial memory ƒë·ªÉ setup test scenarios"""
    
    memory_id = agent.retrieval_memory.add_memory(
        content=content,
        context=context,
        tags=["test", "initial"],
        importance_score=importance,
        metadata={
            "test_setup": True,
            "timestamp": datetime.now().isoformat()
        }
    )
    
    return memory_id


def test_update_operations():
    """Test UPDATE operations v·ªõi specific scenarios"""
    
    print("\n" + "="*80)
    print("üîÑ TESTING UPDATE OPERATIONS")
    print("="*80)
    
    config = {
        "openai_model": "gpt-4o-mini",
        "similarity_threshold_update": 0.7,  # Lower threshold ƒë·ªÉ easier trigger UPDATE
        "similarity_threshold_delete": 0.9,
        "importance_threshold": 0.2,
        "max_memory_capacity": 1000
    }
    
    agent = RLChatbotAgent(config=config)
    agent.start_conversation()
    
    update_scenarios = create_update_test_scenarios()
    
    for i, scenario in enumerate(update_scenarios):
        print(f"\n--- UPDATE TEST {i+1}: {scenario['name']} ---")
        print(f"Description: {scenario['description']}")
        print(f"Expected: {scenario['expected_operation']}")
        print(f"Reasoning: {scenario['reasoning']}")
        
        # Step 1: Add initial memory
        print(f"\n1Ô∏è‚É£ Initial: {scenario['initial_dialogue']}")
        initial_result = agent.process_dialogue_batch([scenario['initial_dialogue']])
        initial_memories = initial_result.get('memories_added', 0)
        print(f"   Added {initial_memories} initial memories")
        
        # Step 2: Process update dialogue
        print(f"\n2Ô∏è‚É£ Update: {scenario['update_dialogue']}")
        update_result = agent.process_dialogue_batch([scenario['update_dialogue']])
        
        # Analyze results
        operations = update_result.get('operations_performed', [])
        if operations:
            operation = operations[0]
            actual_op = operation.get('operation')
            if hasattr(actual_op, 'value'):
                actual_op = actual_op.value
            
            confidence = operation.get('confidence', 0)
            reasoning = operation.get('reasoning', 'N/A')
            
            print(f"   Actual Operation: {actual_op}")
            print(f"   Confidence: {confidence:.2f}")
            print(f"   Reasoning: {reasoning}")
            
            # Check if it matches expectation
            if actual_op == scenario['expected_operation']:
                print(f"   ‚úÖ SUCCESS: Got expected {scenario['expected_operation']} operation")
            else:
                print(f"   ‚ùå UNEXPECTED: Expected {scenario['expected_operation']}, got {actual_op}")
        
        print(f"   Updates: {update_result.get('memories_updated', 0)}")
        print(f"   Adds: {update_result.get('memories_added', 0)}")
        print(f"   NOOPs: {update_result.get('noop_operations', 0)}")


def test_delete_operations():
    """Test DELETE operations v·ªõi specific scenarios"""
    
    print("\n" + "="*80)
    print("üóëÔ∏è TESTING DELETE OPERATIONS")
    print("="*80)
    
    config = {
        "openai_model": "gpt-4o-mini", 
        "similarity_threshold_update": 0.8,
        "similarity_threshold_delete": 0.85,  # Lower threshold ƒë·ªÉ easier trigger DELETE
        "importance_threshold": 0.3,
        "max_memory_capacity": 1000
    }
    
    agent = RLChatbotAgent(config=config)
    agent.start_conversation()
    
    delete_scenarios = create_delete_test_scenarios()
    
    for i, scenario in enumerate(delete_scenarios):
        print(f"\n--- DELETE TEST {i+1}: {scenario['name']} ---")
        print(f"Description: {scenario['description']}")
        print(f"Expected: {scenario['expected_operation']}")
        print(f"Reasoning: {scenario['reasoning']}")
        
        # Step 1: Add initial memory
        print(f"\n1Ô∏è‚É£ Initial: {scenario['initial_dialogue']}")
        initial_result = agent.process_dialogue_batch([scenario['initial_dialogue']])
        initial_memories = initial_result.get('memories_added', 0)
        print(f"   Added {initial_memories} initial memories")
        
        # Step 2: Process repeat dialogue
        print(f"\n2Ô∏è‚É£ Repeat: {scenario['repeat_dialogue']}")
        repeat_result = agent.process_dialogue_batch([scenario['repeat_dialogue']])
        
        # Analyze results
        operations = repeat_result.get('operations_performed', [])
        if operations:
            operation = operations[0]
            actual_op = operation.get('operation')
            if hasattr(actual_op, 'value'):
                actual_op = actual_op.value
            
            confidence = operation.get('confidence', 0)
            reasoning = operation.get('reasoning', 'N/A')
            
            print(f"   Actual Operation: {actual_op}")
            print(f"   Confidence: {confidence:.2f}")
            print(f"   Reasoning: {reasoning}")
            
            # Check if it matches expectation
            expected_ops = scenario['expected_operation'].split(' ho·∫∑c ')
            if actual_op in expected_ops:
                print(f"   ‚úÖ SUCCESS: Got expected operation ({actual_op})")
            else:
                print(f"   ‚ùå UNEXPECTED: Expected {scenario['expected_operation']}, got {actual_op}")
        
        print(f"   Deletes: {repeat_result.get('memories_deleted', 0)}")
        print(f"   Adds: {repeat_result.get('memories_added', 0)}")
        print(f"   NOOPs: {repeat_result.get('noop_operations', 0)}")


def test_noop_operations():
    """Test NOOP operations v·ªõi specific scenarios"""
    
    print("\n" + "="*80)
    print("‚è∏Ô∏è TESTING NOOP OPERATIONS")
    print("="*80)
    
    config = {
        "openai_model": "gpt-4o-mini",
        "importance_threshold": 0.4,  # Higher threshold ƒë·ªÉ easier trigger NOOP
        "max_memory_capacity": 1000
    }
    
    agent = RLChatbotAgent(config=config)
    agent.start_conversation()
    
    noop_scenarios = create_noop_test_scenarios()
    
    for i, scenario in enumerate(noop_scenarios):
        print(f"\n--- NOOP TEST {i+1}: {scenario['name']} ---")
        print(f"Description: {scenario['description']}")
        print(f"Expected: {scenario['expected_operation']}")
        print(f"Reasoning: {scenario['reasoning']}")
        
        print(f"\nüí¨ Dialogue: {scenario['dialogue']}")
        result = agent.process_dialogue_batch([scenario['dialogue']])
        
        # Analyze results
        operations = result.get('operations_performed', [])
        if operations:
            operation = operations[0]
            actual_op = operation.get('operation')
            if hasattr(actual_op, 'value'):
                actual_op = actual_op.value
            
            confidence = operation.get('confidence', 0)
            reasoning = operation.get('reasoning', 'N/A')
            extracted_info = operation.get('extracted_info', {})
            importance = extracted_info.get('importance', 0)
            
            print(f"   Actual Operation: {actual_op}")
            print(f"   Confidence: {confidence:.2f}")
            print(f"   Importance: {importance:.2f}")
            print(f"   Reasoning: {reasoning}")
            
            # Check if it matches expectation
            if actual_op == scenario['expected_operation']:
                print(f"   ‚úÖ SUCCESS: Got expected {scenario['expected_operation']} operation")
            else:
                print(f"   ‚ùå UNEXPECTED: Expected {scenario['expected_operation']}, got {actual_op}")
        
        print(f"   NOOPs: {result.get('noop_operations', 0)}")
        print(f"   Adds: {result.get('memories_added', 0)}")


def test_similarity_based_decisions():
    """Test decision logic d·ª±a tr√™n similarity scores c·ª• th·ªÉ"""
    
    print("\n" + "="*80)
    print("üìä TESTING SIMILARITY-BASED DECISIONS")
    print("="*80)
    
    # Create memory manager ƒë·ªÉ test directly
    memory_system = RetrievalAugmentedMemory(store_type="chroma")
    llm_extractor = LLMExtractor()
    
    manager = IntelligentMemoryManager(
        memory_system=memory_system,
        llm_extractor=llm_extractor,
        similarity_threshold_update=0.8,
        similarity_threshold_delete=0.95,
        importance_threshold=0.3
    )
    
    # Test cases v·ªõi different similarity scores
    test_cases = [
        {
            "similarity": 0.5,
            "importance": 0.8,
            "expected": "ADD",
            "description": "Low similarity, high importance"
        },
        {
            "similarity": 0.85,
            "importance": 0.7,
            "expected": "UPDATE", 
            "description": "High similarity, good importance"
        },
        {
            "similarity": 0.97,
            "importance": 0.4,
            "expected": "DELETE",
            "description": "Very high similarity, lower importance"
        },
        {
            "similarity": 0.85,
            "importance": 0.1,
            "expected": "NOOP",
            "description": "High similarity, very low importance"
        }
    ]
    
    for i, test_case in enumerate(test_cases):
        print(f"\n--- SIMILARITY TEST {i+1}: {test_case['description']} ---")
        print(f"Similarity: {test_case['similarity']:.2f}")
        print(f"Importance: {test_case['importance']:.2f}")
        print(f"Expected: {test_case['expected']}")
        
        # Create mock memory context
        from memory.memory_manager import MemoryDecisionContext
        from memory.retrieval_memory import EpisodicMemory
        
        # Create existing memory ƒë·ªÉ test against
        existing_memory = EpisodicMemory(
            id="test_memory",
            content="Test existing content",
            context="Test context",
            importance_score=0.6,
            access_count=5
        )
        
        context = MemoryDecisionContext(
            current_info={
                "importance": test_case['importance'],
                "requires_memory": True,
                "key_facts": ["test fact"],
                "sentiment": "neutral"
            },
            retrieved_memories=[existing_memory] if test_case['similarity'] > 0.1 else [],
            similarity_scores=[test_case['similarity']] if test_case['similarity'] > 0.1 else [],
            dialogue_turn="Test dialogue",
            conversation_context="Test context"
        )
        
        # Get decision
        result = manager.determine_memory_operation(context)
        
        actual_op = result.operation.value if hasattr(result.operation, 'value') else str(result.operation)
        
        print(f"Actual Operation: {actual_op}")
        print(f"Confidence: {result.confidence:.2f}")
        print(f"Reasoning: {result.reasoning}")
        
        if actual_op == test_case['expected']:
            print(f"‚úÖ SUCCESS: Correct decision")
        else:
            print(f"‚ùå FAILURE: Expected {test_case['expected']}, got {actual_op}")


def main():
    """Main test function"""
    
    print("üß™ COMPREHENSIVE UPDATE/DELETE/NOOP TESTING FOR ALGORITHM 1")
    print("=" * 80)
    
    setup_logging()
    
    # Run all tests
    test_update_operations()
    test_delete_operations() 
    test_noop_operations()
    test_similarity_based_decisions()
    
    print("\n" + "="*80)
    print("üéØ TESTING COMPLETED!")
    print("="*80)
    print("\nNotes:")
    print("- UPDATE operations require similar content v·ªõi new information")
    print("- DELETE operations require very high similarity v·ªõi lower importance")
    print("- NOOP operations trigger with low importance ho·∫∑c sufficient existing memory")
    print("- Similarity thresholds c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh ƒë·ªÉ optimize performance")


if __name__ == "__main__":
    main()
